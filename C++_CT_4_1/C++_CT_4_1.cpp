// C++_CT_4_1.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <bits/stdc++.h>

using namespace std;

//입력조건 1 공간크기입력 //공간은 우측과 하측이동이 +1
int n;
//입력조건 2 하나의 줄에 띄어쓰기 기준 LRUD문자 반복적으로 적혀있음
string plans;
//시작좌표
int x = 1, y = 1;
//x는 좌우 y는 위아래
//LRUD에 대응하는 이동방향

char moveArray[4] = {'L','R','U','D'};
int dx[4] = {-1,1,0,0};
int dy[4] = {0,0,-1,1};

int main()
{
    cin >> n;
    cin.ignore();
    getline(cin, plans);

    for (int i = 0; i < plans.size(); i++)
    {
        char plan = plans[i];

        //나온 알파벳 방향 이동시 좌표 계산
        int tx = 0, ty = 0;
        //뽑은 문자가 올바른 방향 알파벳인지 확인 후  찾으면 반복 중단 후 좌표 계산
        for (int j = 0; j < 4; j++)
        {
            if (plan == moveArray[j])
            {
                tx = x + dx[j];
                ty = y + dy[j];
                break;
            }
        }
        //좌표 계산 결과가 공간을 벗어나는경우 해당 이동 무시
        if (tx<1 || ty<1 || tx>n || ty>n)
        {
            continue;
        }
        x = tx;
        y = ty;
    }
    //최종 행,렬 출력
    cout << y << ' ' << x << '\n';
    return 0;
}

// 프로그램 실행: <Ctrl+F5> 또는 [디버그] > [디버깅하지 않고 시작] 메뉴
// 프로그램 디버그: <F5> 키 또는 [디버그] > [디버깅 시작] 메뉴

// 시작을 위한 팁: 
//   1. [솔루션 탐색기] 창을 사용하여 파일을 추가/관리합니다.
//   2. [팀 탐색기] 창을 사용하여 소스 제어에 연결합니다.
//   3. [출력] 창을 사용하여 빌드 출력 및 기타 메시지를 확인합니다.
//   4. [오류 목록] 창을 사용하여 오류를 봅니다.
//   5. [프로젝트] > [새 항목 추가]로 이동하여 새 코드 파일을 만들거나, [프로젝트] > [기존 항목 추가]로 이동하여 기존 코드 파일을 프로젝트에 추가합니다.
//   6. 나중에 이 프로젝트를 다시 열려면 [파일] > [열기] > [프로젝트]로 이동하고 .sln 파일을 선택합니다.
